package com.starkbank;

import com.starkbank.utils.Generator;
import com.starkbank.utils.Resource;
import com.starkbank.utils.Rest;
import com.starkcore.utils.SubResource;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public final class Transaction extends Resource {
    /**
     * Transaction object
     * <p>
     * A Transaction is a transfer of funds between workspaces inside Stark Bank.
     * Transactions created by the user are only for internal transactions.
     * Other operations (such as transfer or charge-payment) will automatically
     * create a transaction for the user which can be retrieved for the statement.
     * <p>
     * When you initialize a Transaction, the entity will not be automatically
     * created in the Stark Bank API. The "create" function sends the objects
     * to the Stark Bank API and returns the list of created objects.
     * <p>
     * Parameters:
     * amount [long]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
     * description [string]: text to be displayed in the receiver and the sender statements (Min. 10 characters). ex: "funds redistribution"
     * externalId [string]: unique id, generated by user, to avoid duplicated transactions. ex: "transaction ABC 2020-03-30"
     * receiverId [string]: unique id of the receiving workspace. ex: "5656565656565656"
     * tags [list of strings, default null]: list of strings for reference when searching transactions (may be empty). ex: ["abc", "test"]
     * senderId [string]: unique id of the sending workspace. ex: "5656565656565656"
     * source [string]: unique locator of the related entity in the API reference
     * id [string]: unique id returned when the transaction is created. ex: "7656565656565656"
     * fee [integer]: fee charged when the transaction is created. ex: 200 (= R$ 2.00)
     * balance [long]: account balance after transaction was processed. ex: 100000000 (= R$ 1,000,000.00)
     * created [string]: creation datetime for the transaction. ex: "2020-03-10 10:30:00.000000+00:00"
     */
    static ClassData data = new ClassData(Transaction.class, "Transaction");

    public long amount;
    public String description;
    public String externalId;
    public String senderId;
    public String receiverId;
    public String[] tags;
    public Integer fee;
    public String source;
    public Long balance;
    public String created;

    /**
     * Transaction object
     * <p>
     * A Transaction is a transfer of funds between workspaces inside Stark Bank.
     * Transactions created by the user are only for internal transactions.
     * Other operations (such as transfer or charge-payment) will automatically
     * create a transaction for the user which can be retrieved for the statement.
     * <p>
     * When you initialize a Transaction, the entity will not be automatically
     * created in the Stark Bank API. The "create" function sends the objects
     * to the Stark Bank API and returns the list of created objects.
     * <p>
     * Parameters:
     * @param amount [long]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
     * @param description [string]: text to be displayed in the receiver and the sender statements (Min. 10 characters). ex: "funds redistribution"
     * @param externalId [string]: unique id, generated by user, to avoid duplicated transactions. ex: "transaction ABC 2020-03-30"
     * @param receiverId [string]: unique id of the receiving workspace. ex: "5656565656565656"
     * @param tags [list of strings, default null]: list of strings for reference when searching transactions (may be empty). ex: ["abc", "test"]
     * @param senderId [string]: unique id of the sending workspace. ex: "5656565656565656"
     * @param source [string]: unique locator of the related entity in the API reference
     * @param id [string]: unique id returned when the transaction is created. ex: "7656565656565656"
     * @param fee [integer]: fee charged when the transaction is created. ex: 200 (= R$ 2.00)
     * @param balance [long]: account balance after transaction was processed. ex: 100000000 (= R$ 1,000,000.00)
     * @param created [string]: creation datetime for the transaction. ex: "2020-03-10 10:30:00.000000+00:00"
     */
    public Transaction(long amount, String description, String externalId, String receiverId, String senderId,
                       String[] tags, int fee, String created, String source, Long balance, String id) {
        super(id);
        this.amount = amount;
        this.description = description;
        this.externalId = externalId;
        this.receiverId = receiverId;
        this.senderId = senderId;
        this.tags = tags;
        this.fee = fee;
        this.source = source;
        this.balance = balance;
        this.created = created;
    }

    /**
     * Transaction object
     * <p>
     * A Transaction is a transfer of funds between workspaces inside Stark Bank.
     * Transactions created by the user are only for internal transactions.
     * Other operations (such as transfer or charge-payment) will automatically
     * create a transaction for the user which can be retrieved for the statement.
     * <p>
     * When you initialize a Transaction, the entity will not be automatically
     * created in the Stark Bank API. The "create" function sends the objects
     * to the Stark Bank API and returns the list of created objects.
     * <p>
     * Parameters:
     * @param data map of properties for the creation of the Transaction
     * 
     * Parameters (required):
     * amount [long]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
     * description [string]: text to be displayed in the receiver and the sender statements (Min. 10 characters). ex: "funds redistribution"
     * externalId [string]: unique id, generated by user, to avoid duplicated transactions. ex: "transaction ABC 2020-03-30"
     * receivedId [string]: unique id of the receiving workspace. ex: "5656565656565656"
     * 
     * Parameters (optional):
     * tags [list of strings, default null]: list of strings for reference when searching transactions (may be empty). ex: ["abc", "test"]
     * 
     * Attributes (return-only):
     * senderId [string]: unique id of the sending workspace. ex: "5656565656565656"
     * source [string]: unique locator of the related entity in the API reference
     * id [string]: unique id returned when transaction is created. ex: "7656565656565656"
     * fee [integer]: fee charged when the transaction is created. ex: 200 (= R$ 2.00)
     * balance [long]: account balance after the transaction was processed. ex: 100000000 (= R$ 1,000,000.00)
     * created [string]: creation datetime for the transaction. ex: "2020-03-10 10:30:00.000000+00:00"
     * @throws Exception error in the request
     */
    public Transaction(Map<String, Object> data) throws Exception {
        super(null);
        HashMap<String, Object> dataCopy = new HashMap<>(data);

        this.amount = (int) dataCopy.remove("amount");
        this.description = (String) dataCopy.remove("description");
        this.externalId = (String) dataCopy.remove("externalId");
        this.receiverId = (String) dataCopy.remove("receiverId");
        this.tags = (String[]) dataCopy.remove("tags");
        this.fee = null;
        this.senderId = null;
        this.source = null;
        this.balance = null;
        this.created = null;

        if (!dataCopy.isEmpty()) {
            throw new Exception("Unknown parameters used in constructor: [" + String.join(", ", dataCopy.keySet()) + "]");
        }
    }

    public Transaction(){
        super(null);
    }

    /**
     * Retrieve a specific Transaction
     * <p>
     * Receive a single Transaction object previously created in the Stark Bank API by passing its id
     * <p>
     * Parameters:
     * @param id [string]: object unique id. ex: "5656565656565656"
     * <p>
     * Return:
     * @return Transaction object with updated attributes
     * @throws Exception error in the request
     */
    public static Transaction get(String id) throws Exception {
        return Transaction.get(id, null);
    }

    /**
     * Retrieve a specific Transaction
     * <p>
     * Receive a single Transaction object previously created in the Stark Bank API by passing its id
     * <p>
     * Parameters:
     * @param id [string]: object unique id. ex: "5656565656565656"
     * @param user [Organization/Project object]: Organization or Project object. Not necessary if starkbank.User.defaultUser was set before function call
     * <p>
     * Return:
     * @return Transaction object with updated attributes
     * @throws Exception error in the request
     */
    public static Transaction get(String id, User user) throws Exception {
        return Rest.getId(data, id, user);
    }

    /**
     * Retrieve Transactions
     * <p>
     * Receive a generator of Transaction objects previously created in the Stark Bank API.
     * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
     * <p>
     * Parameters:
     * @param params parameters of the query
     * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
     * after [string, default null] date filter for objects created only after specified date. ex: "2020-03-10"
     * before [string, default null] date filter for objects created only before specified date. ex: "2020-03-10"
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * externalIds [list of strings, default null]: list of external ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * <p>
     * Return:
     * @return generator of Transaction objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<Transaction> query(Map<String, Object> params) throws Exception {
        return Transaction.query(params, null);
    }

    /**
     * Retrieve Transactions
     * <p>
     * Receive a generator of Transaction objects previously created in the Stark Bank API.
     * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
     * <p>
     * Parameters:
     * @param user [Organization/Project object]: Organization or Project object. Not necessary if starkbank.User.defaultUser was set before function call
     * <p>
     * Return:
     * @return generator of Transaction objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<Transaction> query(User user) throws Exception {
        return Transaction.query(new HashMap<>(), user);
    }

    /**
     * Retrieve Transactions
     * <p>
     * Receive a generator of Transaction objects previously created in the Stark Bank API.
     * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
     * <p>
     * Return:
     * @return generator of Transaction objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<Transaction> query() throws Exception {
        return Transaction.query(new HashMap<>(), null);
    }

    /**
     * Retrieve Transactions
     * <p>
     * Receive a generator of Transaction objects previously created in the Stark Bank API.
     * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
     * <p>
     * Parameters:
     * @param params parameters of the query
     * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
     * after [string, default null] date filter for objects created only after specified date. ex: "2020-03-10"
     * before [string, default null] date filter for objects created only before specified date. ex: "2020-03-10"
     * externalIds [list of strings, default null]: list of external ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * @param user [Organization/Project object]: Organization or Project object. Not necessary if starkbank.User.defaultUser was set before function call
     * <p>
     * Return:
     * @return generator of Transaction objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<Transaction> query(Map<String, Object> params, User user) throws Exception {
        return Rest.getStream(data, params, user);
    }

    public final static class Page {
        public List<Transaction> transactions;
        public String cursor;

        public Page(List<Transaction> transactions, String cursor) {
            this.transactions = transactions;
            this.cursor = cursor;
        }
    }

    /**
     * Retrieve paged Transactions
     * <p>
     * Receive a list of up to 100 Transaction objects previously created in the Stark Bank API and the cursor to the next page.
     * Use this function instead of query if you want to manually page your requests.
     * <p>
     * Parameters:
     * @param params parameters of the query
     * cursor [string, default null]: cursor returned on the previous page function call
     * limit [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 50
     * after [string, default null] date filter for objects created only after specified date. ex: "2020-03-10"
     * before [string, default null] date filter for objects created only before specified date. ex: "2020-03-10"
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * externalIds [list of strings, default null]: list of external ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * <p>
     * Return:
     * @return Transaction.Page object:
     * Transaction.Page.transactions: list of Transaction objects with updated attributes
     * Transaction.Page.cursor: cursor to retrieve the next page of Transaction objects
     * @throws Exception error in the request
     */
    public static Page page(Map<String, Object> params) throws Exception {
        return Transaction.page(params, null);
    }

    /**
     * Retrieve paged Transactions
     * <p>
     * Receive a list of up to 100 Transaction objects previously created in the Stark Bank API and the cursor to the next page.
     * Use this function instead of query if you want to manually page your requests.
     * <p>
     * Parameters:
     * @param user [Organization/Project object]: Organization or Project object. Not necessary if starkbank.User.defaultUser was set before function call
     * <p>
     * Return:
     * @return Transaction.Page object:
     * Transaction.Page.transactions: list of Transaction objects with updated attributes
     * Transaction.Page.cursor: cursor to retrieve the next page of Transaction objects
     * @throws Exception error in the request
     */
    public static Page page(User user) throws Exception {
        return Transaction.page(new HashMap<>(), user);
    }

    /**
     * Retrieve paged Transactions
     * <p>
     * Receive a list of up to 100 Transaction objects previously created in the Stark Bank API and the cursor to the next page.
     * Use this function instead of query if you want to manually page your requests.
     * <p>
     * Return:
     * @return Transaction.Page object:
     * Transaction.Page.transactions: list of Transaction objects with updated attributes
     * Transaction.Page.cursor: cursor to retrieve the next page of Transaction objects
     * @throws Exception error in the request
     */
    public static Page page() throws Exception {
        return Transaction.page(new HashMap<>(), null);
    }

    /**
     * Retrieve paged Transactions
     * <p>
     * Receive a list of up to 100 Transaction objects previously created in the Stark Bank API and the cursor to the next page.
     * Use this function instead of query if you want to manually page your requests.
     * <p>
     * Parameters:
     * @param params parameters of the query
     * cursor [string, default null]: cursor returned on the previous page function call
     * limit [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 50
     * after [string, default null] date filter for objects created only after specified date. ex: "2020-03-10"
     * before [string, default null] date filter for objects created only before specified date. ex: "2020-03-10"
     * externalIds [list of strings, default null]: list of external ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * @param user [Organization/Project object]: Organization or Project object. Not necessary if starkbank.User.defaultUser was set before function call
     * <p>
     * Return:
     * @return Transaction.Page object:
     * Transaction.Page.transactions: list of Transaction objects with updated attributes
     * Transaction.Page.cursor: cursor to retrieve the next page of Transaction objects
     * @throws Exception error in the request
     */
    public static Page page(Map<String, Object> params, User user) throws Exception {
        com.starkcore.utils.Page page = Rest.getPage(data, params, user);
        List<Transaction> transactions = new ArrayList<>();
        for (SubResource transaction: page.entities) {
            transactions.add((Transaction) transaction);
        }
        return new Page(transactions, page.cursor);
    }

    /**
     * @deprecated Function deprecated since 2.23.0
     * <p>
     * Create Transactions
     * <p>
     * Send a list of Transaction objects for creation in the Stark Bank API
     * <p>
     * Parameters:
     * @param transactions [list of Transaction objects or HashMaps]: list of Transaction objects to be created in the API
     * <p>
     * Return:
     * @return list of Transaction objects with updated attributes
     * @throws Exception error in the request
     */
    @Deprecated
    public static List<Transaction> create(List<?> transactions) throws Exception {
        return Transaction.create(transactions, null);
    }

    /**
     * @deprecated Function deprecated since 2.23.0
     * <p>
     * Create Transactions
     * <p>
     * Send a list of Transaction objects for creation in the Stark Bank API
     * <p>
     * Parameters:
     * @param transactions [list of Transaction objects or HashMaps]: list of Transaction objects to be created in the API
     * @param user [Organization/Project object]: Organization or Project object. Not necessary if starkbank.User.defaultUser was set before function call
     * <p>
     * Return:
     * @return list of Transaction objects with updated attributes
     * @throws Exception error in the request
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    public static List<Transaction> create(List<?> transactions, User user) throws Exception {
       throw new Exception("Function deprecated since 2.23.0");
    }
}
