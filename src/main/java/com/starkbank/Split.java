package com.starkbank;

import com.starkbank.utils.Rest;
import com.starkbank.utils.Resource;
import com.starkbank.utils.Generator;
import com.starkbank.utils.SubResource;
import com.starkbank.error.ErrorElement;

import java.util.Map;
import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;


public class Split extends Resource {
    /**
     * Split object
     * <p>
     * When you initialize a Split, the entity will not be automatically
     * created in the Stark Bank API. The "create" function sends the objects
     * to the Stark Bank API and returns the list of created objects.
     * <p>
     * Parameters:
     * amount [int]: value to send to receivers. ex: 1000 (= R$ 10.00)
     * receiverId [string]: split receiver unique id. ex: "5656565656565656"
     * id [string]: unique id returned when the Split is created. ex: "5656565656565656"
     * source [string]: source receivable which generated this split object. ex: "5656565656565656"
     * externalId [string]: unique id, generated by the system, to avoid duplicated splits. ex: "invoice/1234/receiver/5678"
     * tags [list of strings, default []]: list of strings for tagging
     * scheduled [string, default now]: payment scheduled date or datetime. ex: "2020-03-10 10:30:00.000000+00:00"
     * status [string]: current payment status. ex: "success" or "failed"
     * created [string]: creation datetime for the payment. ex: "2020-03-10 10:30:00.000000+00:00"
     * updated [string]: update datetime for the payment. ex: "2020-03-10 10:30:00.000000+00:00"
     */
    static ClassData data = new ClassData(Split.class, "Split");

    public long amount;
    public String receiverId;
    public String source;
    public String externalId;
    public String[] tags;
    public String scheduled;
    public String status;
    public String created;
    public String updated;

    /**
     * Split object
     * <p>
     * When you initialize a Split, the entity will not be automatically
     * created in the Stark Bank API. The "create" function sends the objects
     * to the Stark Bank API and returns the list of created objects.
     * <p>
     * Parameters:
     * @param amount [integer]: value to send to receivers. ex: 1000 (= R$ 10.00)
     * @param receiverId [string]: split receiver unique id. ex: "5656565656565656"
     * @param id [string]: unique id returned when the Split is created. ex: "5656565656565656"
     * @param source [string]: source receivable which generated this split object. ex: "5656565656565656"
     * @param externalId [string]: unique id, generated by the system, to avoid duplicated splits. ex: "invoice/1234/receiver/5678"
     * @param tags [list of strings, default []]: list of strings for tagging
     * @param scheduled [string, default now]: payment scheduled date or datetime. ex: "2020-03-10 10:30:00.000000+00:00"
     * @param status [string]: current payment status. ex: "success" or "failed"
     * @param created [string]: creation datetime for the payment. ex: "2020-03-10 10:30:00.000000+00:00"
     * @param updated [string]: update datetime for the payment. ex: "2020-03-10 10:30:00.000000+00:00"
     */
    public Split(long amount, String receiverId, String id, String source, String externalId,
                 String[] tags, String scheduled, String status, String created, String updated
    ) {
        super(id);
        this.amount = amount;
        this.receiverId = receiverId;
        this.source = source;
        this.externalId = externalId;
        this.tags = tags;
        this.scheduled = scheduled;
        this.status = status;
        this.created = created;
        this.updated = updated;
    }

    /**
     * Split object
     * <p>
     * When you initialize a Split, the entity will not be automatically
     * created in the Stark Bank API. The "create" function sends the objects
     * to the Stark Bank API and returns the list of created objects.
     * <p>
     * @param data map of properties for the creation of the Split
     * Parameters:
     * amount [int]: value to send to receivers. ex: 1000 (= R$ 10.00)
     * receiverId [string]: split receiver unique id. ex: "5656565656565656"
     * Attributes (return-only):
     * id [string]: unique id returned when the Split is created. ex: "5656565656565656"
     * source [string]: source receivable which generated this split object. ex: "5656565656565656"
     * externalId [string]: unique id, generated by the system, to avoid duplicated splits. ex: "invoice/1234/receiver/5678"
     * tags [list of strings, default []]: list of strings for tagging
     * scheduled [string, default now]: payment scheduled date or datetime. ex: "2020-03-10 10:30:00.000000+00:00"
     * status [string]: current payment status. ex: "success" or "failed"
     * created [string]: creation datetime for the payment. ex: "2020-03-10 10:30:00.000000+00:00"
     * updated [string]: update datetime for the payment. ex: "2020-03-10 10:30:00.000000+00:00"
     */
    public Split(Map<String, Object> data) throws Exception {
        super(null);
        HashMap<String, Object> dataCopy = new HashMap<>(data);

        this.amount = (long) dataCopy.remove("amount");
        this.receiverId = (String) dataCopy.remove("receiverId");
        this.source = null;
        this.externalId = null;
        this.tags = null;
        this.scheduled = null;
        this.status = null;
        this.created = null;
        this.updated = null;

        if (!dataCopy.isEmpty()) {
            throw new Exception("Unknown parameters used in constructor: [" + String.join(", ", dataCopy.keySet()) + "]");
        }
    }

    /**
     * Retrieve a specific Split
     * <p>
     * Receive a single Split object previously created in the Stark Bank API by its id
     * <p>
     * Parameters:
     * @param id [string]: unique id returned when the Split is created. ex: "5656565656565656"
     * <p>
     * Return:
     * @return Split object with updated attributes
     * @throws Exception error in the request
     */
    public static Split get(String id) throws Exception {
        return Split.get(id, null);
    }

    /**
     * Retrieve a specific Split
     * <p>
     * Receive a single Split object previously created in the Stark Bank API by its id
     * <p>
     * Parameters:
     * @param id [string]: object unique id. ex: "5656565656565656"
     * <p>
     * Return:
     * @return Split object with updated attributes
     * @throws Exception error in the request
     */
    public static Split get(String id, User user) throws Exception {
        return Rest.getId(data, id, user);
    }

    /**
     * Retrieve Splits
     * <p>
     * Receive a generator of Split objects previously created in the Stark Bank API
     * <p>
     * Parameters:
     * @param params map of parameters for the query
     * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
     * after [string, default null] date filter for objects created only after specified date. ex: "2020-03-10"
     * before [string, default null] date filter for objects created only before specified date. ex: "2020-03-10"
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * receiverIds [list of strings, default null]: list of receiver ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * status [string, default null]: filter for status of retrieved objects. ex: "success"
     * user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
     * <p>
     * Return:
     * @return generator of Split objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<Split> query(Map<String, Object> params, User user) throws Exception {
        return Rest.getStream(data, params, user);
    }

    /**
     * Retrieve Splits
     * <p>
     * Receive a generator of Split objects previously created in the Stark Bank API
     * <p>
     * Parameters:
     * @param params map of parameters for the query
     * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
     * after [datetime.date or string, default null] date filter for objects created only after specified date. ex: datetime.date(2020, 3, 10)
     * before [datetime.date or string, default null] date filter for objects created only before specified date. ex: datetime.date(2020, 3, 10)
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * receiverIds [list of strings, default null]: list of receiver ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * status [string, default null]: filter for status of retrieved objects. ex: "success"
     * <p>
     * Return:
     * @return generator of Split objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<Split> query(Map<String, Object> params) throws Exception{
        return Rest.getStream(data, params, null);
    }

    /**
     * Retrieve Splits
     * <p>
     * Receive a generator of Split objects previously created in the Stark Bank API
     * <p>
     * Parameters:
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
     * <p>
     * Return:
     * @return generator of Split objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<Split> query(User user) throws Exception{
        return Rest.getStream(data, new HashMap<>(), user);
    }

    /**
     * Retrieve Splits
     * <p>
     * Receive a generator of Split objects previously created in the Stark Bank API
     * <p>
     * Return:
     * @return generator of Split objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<Split> query() throws Exception{
        return Rest.getStream(data, new HashMap<>(), null);
    }

    public final static class Page {
        public List<Split> splits;
        public String cursor;

        public Page(List<Split> splits, String cursor) {
            this.splits = splits;
            this.cursor = cursor;
        }
    }

    /**
     * Retrieve paged Splits
     * <p>
     * Receive a list of up to 100 Split objects registered to your workspace in the Stark Bank API and the cursor to the next page.
     * <p>
     * Parameters:
     * @param params map of parameters
     * cursor [string, default null]: cursor returned on the previous page function call
     * limit [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 35
     * after [string, default null]: date filter for objects created only after specified date. ex: "2022-03-22"
     * before [string, default null]: date filter for objects created only before specified date. ex: "2022-03-22"
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * receiverIds [list of strings, default null]: receiver IDs. ex: ["5656565656565656", "4545454545454545"]
     * status [string, default ""]: filter for status of retrieved objects. ex: "success"
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
     * <p>
     * Return:
     * @return Split.Page object:
     * Split.Page.splits: list of Split objects with updated attributes
     * Split.Page.cursor: cursor to retrieve the next page of Split objects
     * @throws Exception error in the request
     */
    public static Page page(Map<String , Object> params, User user) throws Exception {
        com.starkbank.utils.Page page = Rest.getPage(data, params, user);
        List<Split> splits = new ArrayList<>();
        for (SubResource split: page.entities) {
            splits.add((Split) split);
        }
        return new Page(splits, page.cursor);
    }

    /**
     * Retrieve paged Splits
     * <p>
     * Receive a list of up to 100 Split objects registered to your workspace in the Stark Bank API and the cursor to the next page.
     * <p>
     * Parameters:
     * @param params map of parameters
     * cursor [string, default null]: cursor returned on the previous page function call
     * limit [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 35
     * after [string, default null]: date filter for objects created only after specified date. ex: "2022-03-22"
     * before [string, default null]: date filter for objects created only before specified date. ex: "2022-03-22"
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * receiverIds [list of strings, default null]: receiver IDs. ex: ["5656565656565656", "4545454545454545"]
     * status [string, default null]: filter for status of retrieved objects. ex: "success"
     * <p>
     * Return:
     * @return Split.Page object:
     * Split.Page.splits: list of Split objects with updated attributes
     * Split.Page.cursor: cursor to retrieve the next page of Split objects
     * @throws Exception error in the request
     */
    public static Page page(Map<String , Object> params) throws Exception {
        return page(params, null);
    }

    /**
     * Retrieve paged Splits
     * <p>
     * Receive a list of up to 100 Split objects registered to your workspace in the Stark Bank API and the cursor to the next page.
     * <p>
     * Parameters:
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
     * <p>
     * Return:
     * @return Split.Page object:
     * Split.Page.splits: list of Split objects with updated attributes
     * Split.Page.cursor: cursor to retrieve the next page of Split objects
     * @throws Exception error in the request
     */
    public static Page page(User user) throws Exception {
        return page(new HashMap<>(), user);
    }

    /**
     * Retrieve paged Splits
     * <p>
     * Receive a list of up to 100 Split objects registered to your workspace in the Stark Bank API and the cursor to the next page.
     * <p>
     * Return:
     * @return Split.Page object:
     * Split.Page.splits: list of Split objects with updated attributes
     * Split.Page.cursor: cursor to retrieve the next page of Split objects
     * @throws Exception error in the request
     */
    public static Page page() throws Exception {
        return page(new HashMap<>(), null);
    }

    public final static class Log extends Resource {
        static ClassData data = new ClassData(Split.Log.class, "SplitLog");

        public Split split;
        public List<ErrorElement> errors;
        public String type;
        public String created;

        /**
         * Split Log object
         * <p>
         * Every time a Split entity is updated, a corresponding Split.Log
         * is generated for the entity. This log is never generated by the
         * user, but it can be retrieved to check additional information
         * on the Split.
         * <p>
         * Attributes:
         * @param id [string]: unique id returned when the log is created. ex: "5656565656565656"
         * @param split [Split]: Split entity to which the log refers to.
         * @param errors [list of strings]: list of errors linked to this Split event
         * @param type [string]: type of the Split event which triggered the log creation. ex: "success" or "failed"
         * @param created [string]: creation datetime for the log. ex: "2020-03-10 10:30:00.000000+00:00"
         */
        public Log(String created, String type, List<ErrorElement>  errors, Split split, String id) {
            super(id);
            this.created = created;
            this.type = type;
            this.errors = errors;
            this.split = split;
        }

        /**
         * Retrieve a specific Split Log
         * <p>
         * Receive a single Split Log object previously created by the Stark Bank API by passing its id
         * <p>
         * Parameters:
         * @param id [string]: object unique id. ex: "5656565656565656"
         * <p>
         * Return:
         * @return Split Log object with updated attributes
         * @throws Exception error in the request
         */
        public static Split.Log get(String id) throws Exception {
            return Split.Log.get(id, null);
        }

        /**
         * Retrieve a specific Split Log
         * <p>
         * Receive a single Split Log object previously created by the Stark Bank API by passing its id
         * <p>
         * Parameters:
         * @param id [string]: object unique id. ex: "5656565656565656"
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
         * <p>
         * Return:
         * @return Split Log object with updated attributes
         * @throws Exception error in the request
         */
        public static Split.Log get(String id, User user) throws Exception {
            return Rest.getId(data, id, user);
        }

        /**
         * Retrieve Split Logs
         * <p>
         * Receive a generator of Split.Log objects previously created in the Stark Bank API.
         * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
         * <p>
         * Parameters:
         * @param params map of parameters for the query
         * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
         * after [string, default null]: date filter for objects created only after specified date. ex: "2020-03-10"
         * before [string, default null]: date filter for objects created only before specified date. ex: "2020-03-10"
         * types [list of strings, default null]: filter retrieved objects by types. ex: "processing" or "success"
         * splitIds [list of strings, default null]: list of Split ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * <p>
         * Return:
         * @return generator of Split Log objects with updated attributes
         * @throws Exception error in the holder
         */
        public static Generator<Split.Log> query(Map<String, Object> params) throws Exception {
            return Split.Log.query(params, null);
        }

        /**
         * Retrieve Split Logs
         * <p>
         * Receive a generator of Split.Log objects previously created in the Stark Bank API.
         * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
         * <p>
         * Parameters:
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
         * <p>
         * Return:
         * @return generator of Split Log objects with updated attributes
         * @throws Exception error in the holder
         */
        public static Generator<Split.Log> query(User user) throws Exception {
            return Split.Log.query(new HashMap<>(), user);
        }

        /**
         * Retrieve Split Logs
         * <p>
         * Receive a generator of Split.Log objects previously created in the Stark Bank API.
         * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
         * <p>
         * Return:
         * @return generator of Split Log objects with updated attributes
         * @throws Exception error in the holder
         */
        public static Generator<Split.Log> query() throws Exception {
            return Split.Log.query(new HashMap<>(), null);
        }

        /**
         * Retrieve Split Logs
         * <p>
         * Receive a generator of Split.Log objects previously created in the Stark Bank API.
         * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
         * <p>
         * Parameters:
         * @param params map of parameters for the query
         * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
         * after [string, default null]: date filter for objects created only after specified date. ex: "2020-03-10"
         * before [string, default null]: date filter for objects created only before specified date. ex: "2020-03-10"
         * types [list of strings, default null]: filter retrieved objects by types. ex: "processing" or "success"
         * splitIds [list of strings, default null]: list of Split ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
         * <p>
         * Return:
         * @return generator of Split Log objects with updated attributes
         * @throws Exception error in the holder
         */
        public static Generator<Split.Log> query(Map<String, Object> params, User user) throws Exception {
            return Rest.getStream(data, params, user);
        }

        public final static class Page {
            public List<Split.Log> logs;
            public String cursor;

            public Page(List<Split.Log> logs, String cursor) {
                this.logs = logs;
                this.cursor = cursor;
            }
        }

        /**
         * Retrieve paged Split.Logs
         * <p>
         * Receive a list of up to 100 Split.Log objects previously created in the Stark Bank API and the cursor to the next page.
         * Use this function instead of query if you want to manually page your split logs.
         * <p>
         * Parameters:
         * @param params map of parameters for the query
         * cursor [string, default null]: cursor returned on the previous page function call
         * limit [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 50
         * after [string, default null]: date filter for objects created only after specified date. ex: "2020-03-10"
         * before [string, default null]: date filter for objects created only before specified date. ex: "2020-03-10"
         * types [list of strings, default null]: filter retrieved objects by types. ex: "processing" or "success"
         * splitIds [list of strings, default null]: list of Split ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * <p>
         * Return:
         * @return Split.Log.Page object:
         * Split.Log.Page.logs: list of Split.Log objects with updated attributes
         * Split.Log.Page.cursor: cursor to retrieve the next page of Split.Log objects
         * @throws Exception error in the request
         */
        public static Split.Log.Page page(Map<String, Object> params) throws Exception {
            return Split.Log.page(params, null);
        }

        /**
         * Retrieve paged Split.Logs
         * <p>
         * Receive a list of up to 100 Split.Log objects previously created in the Stark Bank API and the cursor to the next page.
         * Use this function instead of query if you want to manually page your split logs.
         * <p>
         * Parameters:
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
         * <p>
         * Return:
         * @return Split.Log.Page object:
         * Split.Log.Page.logs: list of Split.Log objects with updated attributes
         * Split.Log.Page.cursor: cursor to retrieve the next page of Split.Log objects
         * @throws Exception error in the request
         */
        public static Split.Log.Page page(User user) throws Exception {
            return Split.Log.page(new HashMap<>(), user);
        }

        /**
         * Retrieve paged Split.Logs
         * <p>
         * Receive a list of up to 100 Split.Log objects previously created in the Stark Bank API and the cursor to the next page.
         * Use this function instead of query if you want to manually page your split logs.
         * <p>
         * Return:
         * @return Split.Log.Page object:
         * Split.Log.Page.logs: list of Split.Log objects with updated attributes
         * Split.Log.Page.cursor: cursor to retrieve the next page of Split.Log objects
         * @throws Exception error in the request
         */
        public static Split.Log.Page page() throws Exception {
            return Split.Log.page(new HashMap<>(), null);
        }

        /**
         * Retrieve paged Split.Logs
         * <p>
         * Receive a list of up to 100 Split.Log objects previously created in the Stark Bank API and the cursor to the next page.
         * Use this function instead of query if you want to manually page your split logs.
         * <p>
         * Parameters:
         * @param params map of parameters for the query
         * cursor [string, default null]: cursor returned on the previous page function call
         * limit [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 50
         * after [string, default null]: date filter for objects created only after specified date. ex: "2020-03-10"
         * before [string, default null]: date filter for objects created only before specified date. ex: "2020-03-10"
         * types [list of strings, default null]: filter retrieved objects by types. ex: "processing" or "success"
         * splitIds [list of strings, default null]: list of Split ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkbank.Settings.user was set before function call
         * <p>
         * Return:
         * @return Split.Log.Page object:
         * Split.Log.Page.logs: list of Split.Log objects with updated attributes
         * Split.Log.Page.cursor: cursor to retrieve the next page of Split.Log objects
         * @throws Exception error in the request
         */
        public static Split.Log.Page page(Map<String, Object> params, User user) throws Exception {
            com.starkbank.utils.Page page = Rest.getPage(data, params, user);
            List<Split.Log> logs = new ArrayList<>();
            for (SubResource log: page.entities) {
                logs.add((Split.Log) log);
            }
            return new Page(logs, page.cursor);
        }
    }
}